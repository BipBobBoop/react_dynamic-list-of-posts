{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/DropUser.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","length","map","post","id","title","chosen","type","classNames","onClick","event","preventDefault","handlePostButton","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","a","json","responseData","ok","Error","status","client","NewCommentForm","postId","setComments","useState","nameValue","setNameValue","emailValue","setEmailValue","commentValue","setCommentValue","isValidName","setIsValidName","isValidEmail","setIsValidEmail","isValidComment","setIsValidComment","isLoading","setIsLoading","isError","setIsError","postComment","trim","newComment","name","email","createdComment","prevComments","catch","finally","handleRetry","style","marginRight","window","location","reload","border","onSubmit","handleSubmit","htmlFor","value","onChange","target","handleNameInput","placeholder","handleEmailInput","handleCommentInput","PostDetails","comments","isNewComment","setIsNewComment","retryFunction","setRetryFunction","commentToDelete","setCommentToDelete","loadComments","deleteComment","comment","tempComment","filter","c","useEffect","href","handleDeleteComment","handleWriteComment","DropUser","user","isActive","chooseUser","UserSelector","users","setPostsLoadingError","setPosts","selectedUser","setSelectedUser","active","setActive","handleClick","role","App","setUsers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73136b54.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const PostsList: React.FC<Props> = (\n  {\n    posts,\n    selectedPost,\n    setSelectedPost,\n  },\n) => {\n  const handlePostButton = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    post: Post,\n  ) => {\n    event.preventDefault();\n    setSelectedPost(post.id === selectedPost?.id ? null : post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.length > 0 && (posts.map((post: Post) => {\n            const { id, title } = post;\n\n            const chosen = selectedPost?.id !== id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': chosen,\n                    })}\n                    onClick={(event) => handlePostButton(event, post)}\n                  >\n                    {chosen ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          }))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(async (response) => {\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      return responseData;\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number | undefined,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n}) => {\n  const [nameValue, setNameValue] = useState('');\n  const [emailValue, setEmailValue] = useState('');\n  const [commentValue, setCommentValue] = useState('');\n  const [isValidName, setIsValidName] = useState(true);\n  const [isValidEmail, setIsValidEmail] = useState(true);\n  const [isValidComment, setIsValidComment] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const reset = () => {\n    setNameValue('');\n    setIsValidName(true);\n    setEmailValue('');\n    setIsValidEmail(true);\n    setCommentValue('');\n    setIsValidComment(true);\n  };\n\n  const handleNameInput = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setIsValidName(true);\n    setNameValue(event.target.value);\n  };\n\n  const handleEmailInput = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setIsValidEmail(true);\n    setEmailValue(event.target.value);\n  };\n\n  const handleCommentInput = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setIsValidComment(true);\n    setCommentValue(event.target.value);\n  };\n\n  const postComment = () => {\n    setIsValidName(!!nameValue.trim().length);\n    setIsValidEmail(!!emailValue.trim().length);\n    setIsValidComment(!!commentValue.trim().length);\n\n    if (!!nameValue.trim().length\n        && !!emailValue.trim().length\n        && !!commentValue.trim().length) {\n      const newComment = {\n        postId,\n        name: nameValue,\n        email: emailValue,\n        body: commentValue,\n      };\n\n      setIsLoading(true);\n\n      client.post<Comment>('/comments', newComment)\n        .then((createdComment) => {\n          setComments(\n            (prevComments) => [...prevComments, createdComment],\n          );\n          setIsError(false);\n          setCommentValue('');\n        })\n        .catch(() => setIsError(true))\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  const handleRetry = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    postComment();\n  };\n\n  const handleSubmit = (\n    event: React.FormEvent<HTMLFormElement>,\n  ) => {\n    event.preventDefault();\n    postComment();\n  };\n\n  const handleRefresh = () => window.location.reload();\n\n  return (\n    <>\n      {isError && (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <p>Something went wrong</p>\n            </div>\n            <div className=\"level-right\">\n              <button\n                type=\"button\"\n                onClick={event => handleRetry(event)}\n                className=\"button has-background-danger has-text-white\"\n                style={{ marginRight: '20px' }}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-redo-alt\" />\n                </span>\n                <span>Retry</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={handleRefresh}\n                className=\"button has-background-danger has-text-white\"\n                style={{ border: '1px solid white' }}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-sync-alt\" />\n                </span>\n                <span>Refresh Page</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      {!isError && (\n        <form\n          data-cy=\"NewCommentForm\"\n          onSubmit={event => handleSubmit(event)}\n        >\n          <div className=\"field\" data-cy=\"NameField\">\n            <label className=\"label\" htmlFor=\"comment-author-name\">\n              Author Name\n            </label>\n\n            <div className=\"control has-icons-left has-icons-right\">\n              <input\n                value={nameValue}\n                onChange={event => handleNameInput(event)}\n                type=\"text\"\n                name=\"name\"\n                id=\"comment-author-name\"\n                placeholder=\"Name Surname\"\n                className={classNames('input', {\n                  'is-danger': !isValidName,\n                })}\n              />\n\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-user\" />\n              </span>\n\n              {!isValidName && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              )}\n            </div>\n\n            {!isValidName && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Name is required\n              </p>\n            )}\n          </div>\n\n          <div className=\"field\" data-cy=\"EmailField\">\n            <label className=\"label\" htmlFor=\"comment-author-email\">\n              Author Email\n            </label>\n\n            <div className=\"control has-icons-left has-icons-right\">\n              <input\n                value={emailValue}\n                onChange={event => handleEmailInput(event)}\n                type=\"text\"\n                name=\"email\"\n                id=\"comment-author-email\"\n                placeholder=\"email@test.com\"\n                className={classNames('input', {\n                  'is-danger': !isValidEmail,\n                })}\n              />\n\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-envelope\" />\n              </span>\n\n              {!isValidEmail && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              )}\n            </div>\n\n            {!isValidEmail && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Email is required\n              </p>\n            )}\n          </div>\n\n          <div className=\"field\" data-cy=\"BodyField\">\n            <label className=\"label\" htmlFor=\"comment-body\">\n              Comment Text\n            </label>\n\n            <div className=\"control\">\n              <textarea\n                value={commentValue}\n                onChange={event => handleCommentInput(event)}\n                id=\"comment-body\"\n                name=\"body\"\n                placeholder=\"Type comment here\"\n                className={classNames('textarea', {\n                  'is-danger': !isValidComment,\n                })}\n              />\n            </div>\n\n            {!isValidComment && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Enter some text\n              </p>\n            )}\n          </div>\n\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button\n                type=\"submit\"\n                className={classNames('button is-link', {\n                  'is-loading': isLoading,\n                })}\n              >\n                Add\n              </button>\n            </div>\n\n            <div className=\"control\">\n              <button\n                type=\"button\"\n                className=\"button is-link is-light\"\n                onClick={reset}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        </form>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post | null,\n};\n\ntype Action = 'load' | 'delete';\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isNewComment, setIsNewComment] = useState(false);\n  const [retryFunction, setRetryFunction] = useState<Action | null>(null);\n  const [commentToDelete, setCommentToDelete] = useState<Comment | null>(null);\n\n  const loadComments = () => {\n    setIsLoading(true);\n    client.get<Comment[]>(`/comments?postId=${post?.id}`)\n      .then((data) => {\n        setComments(data);\n        setIsError(false);\n      })\n      .catch(() => {\n        setIsError(true);\n        setRetryFunction('load');\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const deleteComment = (comment?: Comment) => {\n    setIsLoading(true);\n    const tempComment = comment || commentToDelete;\n\n    if (tempComment) {\n      client.delete(`/comments/${tempComment.id}`)\n        .then(() => {\n          setComments(\n            prevComments => prevComments.filter(c => c.id !== tempComment.id),\n          );\n          setIsError(false);\n        })\n        .catch(() => {\n          setIsError(true);\n          setRetryFunction('delete');\n        })\n        .finally(() => {\n          setIsLoading(false);\n          setCommentToDelete(tempComment);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (post) {\n      loadComments();\n    }\n  }, [post]);\n\n  const handleWriteComment = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    setIsNewComment(true);\n  };\n\n  const handleDeleteComment = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    comment: Comment,\n  ) => {\n    event.preventDefault();\n    deleteComment(comment);\n  };\n\n  const handleRetry = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    switch (retryFunction) {\n      case 'load':\n        loadComments();\n        break;\n\n      case 'delete':\n        deleteComment();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleRefresh = () => window.location.reload();\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {`${post?.body}`}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (<Loader />)}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              <div className=\"level\">\n                <div className=\"level-left\">\n                  <p>Something went wrong</p>\n                </div>\n                <div className=\"level-right\">\n                  <button\n                    type=\"button\"\n                    onClick={event => handleRetry(event)}\n                    className=\"button has-background-danger has-text-white\"\n                    style={{ marginRight: '20px' }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fas fa-redo-alt\" />\n                    </span>\n                    <span>Retry</span>\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={handleRefresh}\n                    className=\"button has-background-danger has-text-white\"\n                    style={{ border: '1px solid white' }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fas fa-sync-alt\" />\n                    </span>\n                    <span>Refresh Page</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n          {!isError && (!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <p className=\"title is-4\">Comments:</p>\n          ))}\n\n          {!isError && comments.map((comment) => {\n            const {\n              id, email, name, body,\n            } = comment;\n\n            return (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={id}\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                    {`${name}`}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={event => handleDeleteComment(event, comment)}\n                  >\n                    delete button\n                  </button>\n                </div>\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {`${body}`}\n                </div>\n              </article>\n            );\n          })}\n\n          {!isError && !isNewComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={event => handleWriteComment(event)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {!isError && isNewComment && (\n          <NewCommentForm\n            postId={post?.id}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User,\n  isActive: boolean,\n  chooseUser: (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, user: User\n  ) => void\n};\n\nexport const DropUser: React.FC<Props> = ({\n  user,\n  isActive,\n  chooseUser,\n}) => {\n  const { id, name } = user;\n\n  return (\n    <a\n      href={`#user-${id}`}\n      className={classNames('dropdown-item', {\n        'is-active': isActive,\n      })}\n      key={id}\n      onClick={event => chooseUser(event, user)}\n    >\n      {`${name}`}\n    </a>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\nimport { DropUser } from './DropUser';\n\ntype Props = {\n  users: User[],\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n  setPostsLoadingError: React.Dispatch<React.SetStateAction<boolean>>\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  setIsLoading,\n  setPostsLoadingError,\n  setPosts,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setSelectedPost(null);\n      setIsLoading(true);\n      client.get<Post[]>(`/posts?userId=${selectedUser.id}`)\n        .then(posts => {\n          setPosts(posts);\n        })\n        .catch(() => setPostsLoadingError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  const handleClick = (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => {\n    event.preventDefault();\n    setSelectedUser(user);\n    setActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': active,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setActive(!active)}\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user' }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.length > 0 && users.map(user => {\n            const isActive = user.id === selectedUser?.id;\n\n            return (\n              <DropUser\n                user={user}\n                isActive={isActive}\n                chooseUser={handleClick}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    client.get<User[]>('/users')\n      .then(data => setUsers(data))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const handleRefresh = () => {\n    window.location.reload();\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setIsLoading={setIsLoading}\n                  setPostsLoadingError={setIsError}\n                  setPosts={setPosts}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    <div className=\"level\">\n                      <div className=\"level-left\">\n                        <p>Something went wrong</p>\n                      </div>\n                      <div className=\"level-right\">\n                        <button\n                          type=\"button\"\n                          onClick={handleRefresh}\n                          className=\"button\n                            has-background-danger has-text-white\"\n                          style={{ border: '1px solid white' }}\n                        >\n                          <span className=\"icon\">\n                            <i className=\"fas fa-sync-alt\" />\n                          </span>\n                          <span>Refresh Page</span>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                {selectedUser && !posts.length && !isError && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}